# Packages
options(scipen = 999)
library(rstanarm)
library(brms)
library(scales)
library(tidyverse)
library(emmeans)
library(ggthemes)
library(ggpmisc)
library(patchwork)
library(ggtext)
library(ggeffects)
library(agricolae)
library(ggrepel)
library(extrafont)
library(showtext)
showtext_auto()
#font_add_google("Lato", ## name of Google font
#               "lato")  ## name that will be used in R
#font_add_google("Roboto", "roboto")
new_dt <- read_csv("data/deposition.csv")
new_dt %>%
mutate(solution= str_replace(solution, "Water", "")) %>%
unite("trt", c("solution", "sprayer", "nozzle"),
sep = "-", remove = FALSE) %>%
mutate(trt = str_replace(trt, "Intact", "DRA")) %>%
mutate(trt = str_remove(trt, "^[^a-zA-Z]+")) -> new_dt
### Filter deposition dataset inswath
inswath <-  new_dt %>%
filter(type == "inswath") %>%
filter(!is.na(deposition))
brm(deposition ~  trt +
(1|block/location),
data = inswath,
control = list(adapt_delta = 0.95),
family = gaussian(),
warmup = 1000, iter = 2000, chains = 4,
prior = set_prior("student_t(0.5, 3, 11)", class = "b")) -> model1
epred <- emmeans(model1, "trt", dpar = "mean", cont="pairwise")
inswath_main <- pairs(emmeans(model1, ~ trt))
describe_posterior(inswath_main,
centrality = "mean", dispersion = TRUE,
ci = .95, ci_method = "hdi",
test = c("bayesfactor"),
bf_prior = model1)
inswath_main <- pairs(emmeans(model1, ~ trt))
describe_posterior(inswath_main,
centrality = "mean", dispersion = TRUE,
ci = .95, ci_method = "hdi",
test = c("bayesfactor"),
bf_prior = model1)
library(bayestestR)
library(BayesFactor)
inswath_main <- pairs(emmeans(model1, ~ trt))
describe_posterior(inswath_main,
centrality = "mean", dispersion = TRUE,
ci = .95, ci_method = "hdi",
test = c("bayesfactor"),
bf_prior = model1)
epred$emmeans %>% as_tibble() %>%
mutate(sprayer = if_else(str_detect(trt, "Open"), "Open", "Hood")) %>%
mutate(emmean = round(emmean, 1)) %>%
ggplot(aes(x = fct_reorder(trt, emmean), y = emmean,
color = trt, shape = sprayer, label = emmean)) +
geom_point(size = 3) +
geom_jitter(data = inswath %>%
rename(emmean = deposition), alpha = 0.1) +
scale_color_viridis_d(option = "H") +
coord_flip() +
geom_text_repel(  size = 8,
force_pull = 0,
direction = "y",
point.padding = NA,
min.segment.length = 14,
vjust = 0.5,
position = position_dodge2(width = 0.4),
seed = 455) +
scale_shape_manual(values = c(16, 1)) +
geom_linerange(aes(ymin = lower.HPD, ymax = upper.HPD), size = 1.2) +
ylim(0, 2000) +
theme_few() +
labs(x = NULL,
y = expression(paste("In-swath spray deposition  (\u03B7L/cm"^"2",")"))
) +
theme(legend.position = "none",
axis.title = element_text(size = 30),
axis.text = element_markdown(size = 25)) -> figA
ggsave("figures/Figure 2.png", width = 5, height = 4)
## Filter data
data_dw <- new_dt %>%
filter(type == "downwind") %>%
mutate(pass = factor(pass)) %>%
group_by(location, pass, block)
# Linear Model
## Arrange dataset
data_dw1 <- data_dw %>%
group_by(trt) %>%
nest()
### Model function
model3 <- function(df){
brm(log(deposition) ~ log(distance_m) +
(1|block/location), data = df,
control = list(adapt_delta = 0.95),
family = gaussian(),
warmup = 1000, iter = 2000, chains = 4,
prior = set_prior("student_t(0.5, 3, 11)", class = "b"))
}
### Fit model and confidence intervals
data_dw2 <- data_dw1 %>%
mutate(model = map(data, model3),
summary = map(model, broom.mixed::tidy))
### Get parameters from models
params <- data_dw2 %>%
unnest(summary) %>%
filter(effect == "fixed") %>%
mutate(estimate_exp = exp(estimate),
estimate_exp = case_when(
term == "log(distance_m)" ~ -estimate_exp,
TRUE                      ~ estimate_exp
)) %>%
dplyr::select(trt, term, estimate, std.error, conf.low, conf.high) %>%
mutate(term = fct_recode(term,
slope = "logdistance_m"),
term = fct_recode(term,
Intercept = "(Intercept)")) %>%
mutate(estimate = exp(estimate),
conf.low = exp(conf.low),
conf.high = exp(conf.high))
params
fig <- data_dw2 %>%
dplyr::select(trt, model)
fig_model <- function(model){
ggpredict(model, terms = "distance_m", back.transform = TRUE) %>%
as_tibble()
}
fig1 <- fig %>%
mutate(estimates = map(model, fig_model)) %>%
unnest(estimates) %>%
rename(distance_m = x) %>%
mutate_if(is_character, as_factor)
fig1 %>%
distinct(trt) %>%
ungroup() %>%
mutate(id = row_number()) -> id_col
fig1 %>%
left_join(id_col) -> fig1
label <- distance_final %>%
mutate(Intercept = round(Intercept, 1),
slope = round(slope, 2)) %>%
mutate(y = "y = ",
x = "x") %>%
unite("formula", c("y", "Intercept", "slope"), sep = " ") %>%
unite("formula", c("formula", "x"), sep = "")
fig1 %>%
distinct(trt) %>%
ungroup() %>%
mutate(id = row_number()) -> id_col
fig1 %>%
left_join(id_col) -> fig1
label <- distance_final %>%
mutate(Intercept = round(Intercept, 1),
slope = round(slope, 2)) %>%
mutate(y = "y = ",
x = "x") %>%
unite("formula", c("y", "Intercept", "slope"), sep = " ") %>%
unite("formula", c("formula", "x"), sep = "")
fig1 %>%
distinct(trt) %>%
ungroup() %>%
mutate(id = row_number()) -> id_col
fig1 %>%
left_join(id_col) -> fig1
distance_final
fig1
params %>%
mutate(Intercept = round(Intercept, 1),
slope = round(slope, 2)) %>%
pivot_wider(id_cols = trt,
names_from = "term",
values_from = "estimate") %>%
mutate(slope = - slope)
params %>%
mutate(Intercept = round(Intercept, 1),
slope = round(slope, 2))
params %>%
pivot_wider(id_cols = trt,
names_from = "term",
values_from = "estimate") %>%
mutate(slope = - slope)
params %>%
pivot_wider(id_cols = trt,
names_from = "term",
values_from = "estimate") %>%
mutate(slope = - slope) %>%
mutate(Intercept = round(Intercept, 1),
slope = round(slope, 2))
params %>%
pivot_wider(id_cols = trt,
names_from = "term",
values_from = "estimate") %>%
mutate(slope = - slope) %>%
mutate(Intercept = round(Intercept, 1),
slope = round(slope, 2)) %>%
mutate(y = "y = ",
x = "x")
label <- params %>%
pivot_wider(id_cols = trt,
names_from = "term",
values_from = "estimate") %>%
mutate(slope = - slope) %>%
mutate(Intercept = round(Intercept, 1),
slope = round(slope, 2)) %>%
mutate(y = "y = ",
x = "x") %>%
unite("formula", c("y", "Intercept", "slope"), sep = " ") %>%
unite("formula", c("formula", "x"), sep = "")
fig2 <- fig1 %>%
left_join(label)
loc <- tibble(trt = "DRA-Open-TTI")
fig2 %>%
mutate(trt = str_replace(trt, "Intact", "DRA")) %>%
mutate(hood = if_else(str_detect(trt, "Open"), "Open", "Hood")) %>%
ggplot(aes(x = distance_m, y = predicted, color = trt,
fill = trt, label = formula, shape = hood)) +
scale_color_viridis_d(option = "H") +
scale_fill_viridis_d(option = "H") +
geom_line(fill = NA) +
geom_point(alpha = 0.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high),
alpha = 0.3, color = NA) +
facet_wrap(~ trt, ncol = 3) +
scale_shape_manual(values = c(16, 1)) +
theme_few() +
#  geom_text(data = loc, mapping = aes(x = 10, y = 20),
#            label = "Intercept", inherit.aes = FALSE, size = 10) +
#  geom_text(data = loc, mapping = aes(x = 55, y = 10),
##            label = "Slope", inherit.aes = FALSE, size = 10) +
geom_label(aes(label = formula), x = 30, y = 15, color = "white", size = 12) +
#  geom_curve(data = loc, mapping = aes(x = 25, y = 17,
#             xend = 20, yend = 20),
#             arrow = arrow(length = unit(0.07, "inch")),
#             color = 1,
#             size = 0.4, curvature = 0.3, inherit.aes = FALSE) +
#  geom_curve(data = loc, mapping = aes(x = 42, y = 13,
#             xend = 47, yend = 10),
#             arrow = arrow(length = unit(0.07, "inch")),
#             color = 1,
#             size = 0.4, curvature = 0.3, inherit.aes = FALSE) +
labs(x = "Distance (m)",
y = expression(paste("Spray particle deposition (\u03b7L/cm"^"2",")"))) +
theme(legend.position = "none",
legend.text = element_markdown(size = 20),
legend.background = element_blank(),
axis.title = element_markdown(size = 32),
axis.text = element_markdown(size = 28),
strip.background = element_blank(),
strip.text = element_textbox(
size = 32,
face = "bold",
color = "white",
fill = "#494949",
box.color = "#282728",
halign = 0.5, linetype = 1, r = unit(5, "pt"), width = unit(1, "npc"),
padding = margin(2, 0, 1, 0),
margin = margin(3, 3, 3, 3)))
ggsave("figures/Figure 3.png", width = 6, height = 9)
fig2 %>%
mutate(trt = str_replace(trt, "Intact", "DRA")) %>%
mutate(hood = if_else(str_detect(trt, "Open"), "Open", "Hood"))
fig2 %>%
mutate(trt = str_replace(trt, "Intact", "DRA")) %>%
mutate(hood = if_else(str_detect(trt, "Open"), "Open", "Hood")) -> fig3
fig3
savehistory("~/Downloads/bayes_hooded/history.Rhistory")
